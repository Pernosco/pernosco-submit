#!/usr/bin/env python3

from __future__ import annotations

import sys
if sys.version_info < (3, 8):
    print("pernosco-submit requires Python 3.8 or later", file=sys.stderr)
    sys.exit(1)

from typing import Optional, List, IO, Union, Any, Mapping, Tuple, Dict, cast, NewType, TypedDict

import argparse
import base64
import glob
import hashlib
import io
import json
import os
import random
import re
import shutil
import subprocess
import tempfile
import time
import urllib.parse
import urllib.request

import pernoscoshared.base as base
import pernoscoshared.packaging as packaging
import pernoscoshared.sources as sources

AwsAccessKeyId = NewType('AwsAccessKeyId', str)
AwsSecretAccessKey = NewType('AwsSecretAccessKey', str)
PernoscoUser = NewType('PernoscoUser', str)
PernoscoGroup = NewType('PernoscoGroup', str)
PernoscoSecretKey = NewType('PernoscoSecretKey', str)
PernoscoUserSecretKey = NewType('PernoscoUserSecretKey', str)
PublicKey = NewType('PublicKey', str)
Signature = NewType('Signature', str)
Nonce = NewType('Nonce', str)

class CryptoData(TypedDict):
    public_key: PublicKey
    signature: Signature
    nonce: Nonce

def store_positive(value: str) -> int:
    i = int(value)
    if i <= 0:
        raise argparse.ArgumentTypeError("%s is not a positive integer" % value)
    return i

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("-x", dest='echo_commands', action='store_true', help="Echo spawned command lines")
arg_parser.add_argument("--ignore-warnings", type=store_positive, default=0, help="Make the first N warnings non-fatal")
arg_subparsers = arg_parser.add_subparsers(dest='subcommand')

keygen_subparser = arg_subparsers.add_parser("keygen", help="Generate a new public/private key pair for use with Pernosco. Only useful if someone has instructed you to use this.")
keygen_subparser.add_argument("provided_secret")

upload_subparser = arg_subparsers.add_parser("upload", help="Upload a trace to Pernosco")
upload_subparser.add_argument("--title", help="Display the given name in the Pernosco UI and tab title")
upload_subparser.add_argument("--url", help="Make the name a link to the given URL")
upload_subparser.add_argument("--consent-to-current-privacy-policy", action='store_true', help="Unconditionally consent to the current privacy policy")
upload_subparser.add_argument("--no-local-sources", action='store_true', help="Don't try to upload any locally modified or generated sources")
upload_subparser.add_argument("--substitute", metavar='LIB=WITH_PATH', action='append', default=[], help="Override the DW_AT_comp_dir for compilation units of the named library to the named path. Adds WITH_PATH to the allowed source paths. LIB must be the basename of the original name of the library, e.g. 'libc-2.32.so'.")
upload_subparser.add_argument("--dry-run", metavar="PATH", help="Instead of uploading the package, copies it to the given path. Also writes the command/env to <path>.cmd.")
upload_subparser.add_argument("trace_dir")
upload_subparser.add_argument("source_dirs", nargs="*")

upload_package_subparser = arg_subparsers.add_parser("upload-package", help="Upload a package created using `pernosco-submit upload --dry-run` to Pernosco")
upload_package_subparser.add_argument("--title", help="Display the given name in the Pernosco UI and tab title")
upload_package_subparser.add_argument("--url", help="Make the name a link to the given URL")
upload_package_subparser.add_argument("--consent-to-current-privacy-policy", action='store_true', help="Unconditionally consent to the current privacy policy")
upload_package_subparser.add_argument("package", help="Name of the package file produced by `pernosco-submit upload --dry-run`")

analyze_build_subparser = arg_subparsers.add_parser("analyze-build", help="Create extra-rr-trace-files/ containing source file metadata obtained by scanning built binaries and source file repositories")
analyze_build_subparser.add_argument("--build-dir", help="Specify build directory to use as base for relative DW_AT_comp_dir")
analyze_build_subparser.add_argument("--no-local-sources", action='store_true', help="Don't try to upload any locally modified or generated sources")
analyze_build_subparser.add_argument("--substitute", metavar='LIB=WITH_PATH', action='append', default=[], help="Override the DW_AT_comp_dir for compilation units of the named library to the named path. Adds WITH_PATH to the allowed source paths. LIB must be the basename of the original name of the library, e.g. 'libc-2.32.so'.")
analyze_build_subparser.add_argument("--allow-source", metavar='PATH', dest="source_dirs", action='append', default=[], help="Add this path to the list of allowed source paths")
analyze_build_subparser.add_argument("output_dir", help="Where to place extra_rr_trace_files/")
analyze_build_subparser.add_argument("binaries", nargs="*", help="Binary files to scan")

args = arg_parser.parse_args()

base.echo_commands = args.echo_commands

random.seed()

def strip_wrapper(s: str) -> str:
    ret = ""
    for line in s.splitlines():
        if line.startswith("----"):
            continue
        ret += line.strip()
    return ret

def check_executable(executable: str, package: str) -> None:
    if not shutil.which(executable):
        print("Cannot find `%s`. Please install package `%s`."%(executable, package), file=sys.stderr)
        sys.exit(1)

# Fetch current privacy policy version (or None if we fail to get it)
def fetch_privacy_policy_version() -> Optional[int]:
    version_re = re.compile(b'<meta name="policy-version" content="(\d+)">')
    try:
        content = urllib.request.urlopen('https://pernos.co/privacy')
        for line in content.readlines():
            m = version_re.search(line)
            if m:
                return int(m.group(1))
    except:
        pass
    print("Unable to determine privacy policy version!", file=sys.stderr)
    return None

def check_privacy_policy_consent() -> None:
    if args.consent_to_current_privacy_policy:
        return
    policy_version = fetch_privacy_policy_version()
    consent_file_dir = "%s/.local/share/pernosco"%os.environ['HOME']
    consent_file = "%s/consented-to-privacy-policy-version"%consent_file_dir
    try:
        with open(consent_file) as f:
            consented_to_version = int(f.read())
            if consented_to_version == policy_version:
                return
            if policy_version != None:
                print("Privacy policy has changed.", file=sys.stderr)
    except:
        pass
    if not sys.stdin.isatty():
        print("Need to consent to privacy policy, but stdin is not a terminal", file=sys.stderr)
        sys.exit(1)
    if not sys.stdout.isatty():
        print("Need to consent to privacy policy, but stdout is not a terminal", file=sys.stderr)
        sys.exit(1)
    while True:
        s = input("You must consent to the current privacy policy at https://pernos.co/privacy. Do you? (yes/no) ")
        if s == 'no':
            sys.exit(1)
        if s == 'yes':
            break
        print("Please enter 'yes' or 'no'.")
    if policy_version != None:
        os.makedirs(consent_file_dir, exist_ok=True)
        with open(consent_file, "w") as f:
            print(policy_version, file=f)

AVX512_CPUID_EXTENDED_FEATURES_EBX = 0xdc230000
AVX512_CPUID_EXTENDED_FEATURES_ECX = 0x00002c42
AVX512_CPUID_EXTENDED_FEATURES_EDX = 0x0000000c

def has_banned(cpuid_records: List[List[int]]) -> List[str]:
    bans = []
    for r in cpuid_records:
        if r[0] == 7 and r[1] == 0:
            if ((r[3] & AVX512_CPUID_EXTENDED_FEATURES_EBX) != 0 or
                (r[4] & AVX512_CPUID_EXTENDED_FEATURES_ECX) != 0 or
                (r[5] & AVX512_CPUID_EXTENDED_FEATURES_EDX) != 0):
                bans.append("AVX512");
    return bans

SENSITIVE_ENV_VARS = {
    'PERNOSCO_USER_SECRET_KEY': True,
    'AWS_SECRET_ACCESS_KEY': True,
    'DO_API_KEY': True,
    'SSHPASS': True,
    'STRIPE_SECRET_KEY': True,
}

def cpu_supports_cpuid_faulting() -> bool:
    with open("/proc/cpuinfo") as f:
        for line in f:
            if "cpuid_fault" in line:
                return True
    return False

def check_trace() -> None:
    output = base.check_output(['rr', 'traceinfo', args.trace_dir]).decode('utf-8')
    trace_info = json.loads(output)
    if not 'environ' in trace_info:
        print("rr is out of date. Please install `rr` master and make sure it's on your $PATH.", file=sys.stderr)
        sys.exit(1)
    banned = has_banned(trace_info['cpuidRecords'])
    if len(banned) > 0 and not "PERNOSCO_TEST" in os.environ:
        if len(banned) > 1:
            print("CPU features %s enabled when recording trace, but Pernosco does not support them yet."%(" and ".join(banned)), file=sys.stderr)
        else:
            print("CPU feature %s enabled when recording trace, but Pernosco does not support %s yet."%(banned[0], banned[0]), file=sys.stderr)
        if cpu_supports_cpuid_faulting():
            if args.ignore_warnings > 0:
                args.ignore_warnings -= 1
                print("Ignoring this problem, but this trace may fail to process!", file=sys.stderr)
            else:
                print("Re-record with `rr record --disable-cpuid-features-ext 0x%x,0x%x,0x%x`."%(
                    AVX512_CPUID_EXTENDED_FEATURES_EBX,
                    AVX512_CPUID_EXTENDED_FEATURES_ECX,
                    AVX512_CPUID_EXTENDED_FEATURES_EDX), file=sys.stderr)
                sys.exit(2)
        else:
            print("Your CPU does not support CPUID faulting so we're just going to proceed and hope that stuff wasn't used!", file=sys.stderr)
    for env in trace_info['environ']:
        name = env.split('=', 1)[0]
        if name in SENSITIVE_ENV_VARS:
            print("Sensitive environment variable %s found in initial recorded process."%name, file=sys.stderr)
            if args.ignore_warnings > 0:
                args.ignore_warnings -= 1
                print("Ignoring presence of sensitive environment variables. Values will be disclosed!", file=sys.stderr)
            else:
                print("Re-record with environment variable unset.", file=sys.stderr)
                sys.exit(2)

def maybe_write_mozilla_metadata() -> None:
    for firefox_bin in glob.glob("%s/mmap_*_firefox*"%args.trace_dir):
        original_file_names = base.check_output(['rr', 'filename', firefox_bin])
        for name in original_file_names.splitlines():
            application_ini = "%s/application.ini"%os.path.dirname(name).decode('utf-8')
            if os.path.isfile(application_ini):
                base.copy_replace_file(application_ini, '%s/files.mozilla/application.ini'%args.trace_dir)
                return

def write_metadata(pernosco_user: PernoscoUser, pernosco_group: PernoscoGroup) -> None:
    os.makedirs("%s/files.user"%args.trace_dir, exist_ok=True)
    with open('%s/files.user/user'%args.trace_dir, "wt", encoding='utf-8') as f:
        print(pernosco_user, file=f)
    metadata = {}
    if args.title != None:
        metadata['title'] = args.title
    if args.url != None:
        metadata['url'] = args.url
    with open('%s/producer-metadata'%args.trace_dir, "wt", encoding='utf-8') as f:
        print(json.dumps(metadata), file=f)
    with open('%s/files.user/group'%args.trace_dir, "wt", encoding='utf-8') as f:
        print(pernosco_group, file=f)
    maybe_write_mozilla_metadata()

def prepare_upload_data(payload_file: IO[bytes], pernosco_secret_key: PernoscoSecretKey) -> Tuple[PublicKey, Signature, Nonce]:
    """
    Create a package for uploading and return cryptographic data required to
    upload said package.

        Parameters:
            payload_file (IO[bytes]): Package file to be created
            pernosco_secret_key (PernoscoSecretKey): Pernosco secret key

        Return:
            A tuple of cryptographic data required for uploading newly created package: (public_key, signature, nonce)
    """
    with tempfile.TemporaryFile(mode="w+t", encoding='utf-8') as key_file:
        print("-----BEGIN EC PRIVATE KEY-----\n%s\n-----END EC PRIVATE KEY-----"%pernosco_secret_key, file=key_file)
        key_file.seek(0)
        public_key = PublicKey(base.check_output(['openssl', 'ec', '-pubout'], stdin=key_file, stderr=subprocess.DEVNULL).decode('utf-8').strip())
        p0 = base.Popen(["tar", "-I", "zstdmt", "--exclude", "./db*", "-cf", "-", "."], cwd=args.trace_dir, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        assert p0.stdout
        p1 = base.Popen(["tee", payload_file.name], stdin=p0.stdout, stdout=subprocess.PIPE)
        assert p1.stdout
        p0.stdout.close()
        os.set_inheritable(key_file.fileno(), True)
        p2 = base.Popen(["openssl", "dgst", "-sha256", "-sign", "/proc/self/fd/%d"%key_file.fileno()], close_fds=False, stdin=p1.stdout, stdout=subprocess.PIPE)
        p1.stdout.close()
        (sig, err) = p2.communicate()
    if err:
        raise base.CustomException("openssl failed: %s"%err.decode('utf-8'))
    p0.wait()
    p1.wait()
    if p0.returncode != 0:
        raise base.CustomException("tar failed: %d"%p0.returncode)
    if p1.returncode != 0:
        raise base.CustomException("tee failed: %d"%p1.returncode)
    signature = Signature(base64.urlsafe_b64encode(sig).decode('utf-8').strip())
    # Create a nonce that's 64 bits of the SHA256 of the signature.
    hasher = hashlib.sha256()
    hasher.update(sig)
    # Strip '=' because it requires %-encoding in URLs
    nonce = Nonce(base64.urlsafe_b64encode(hasher.digest()[:8]).decode('utf-8').rstrip('=').strip())
    return (public_key, signature, nonce)

def get_aws_environment(aws_access_key_id: AwsAccessKeyId, aws_secret_access_key: AwsSecretAccessKey) -> Dict[str, str]:
    """
    Return a dictionary with current environment variables plus AWS access
    credentials.

        Parameters:
            aws_access_key_id (AwsAccessKeyId): AWS access key ID
            aws_secret_access_key (AwsSecretAccessKey): AWS secret access key

        Returns:
            Dictionary with current environment variables plus AWS access
            credentials.
    """
    aws_env = dict(os.environ,
        AWS_DEFAULT_REGION='us-east-2',
        AWS_ACCESS_KEY_ID=aws_access_key_id,
        AWS_SECRET_ACCESS_KEY=aws_secret_access_key)
    return aws_env

def get_metadata_for_upload(public_key: PublicKey, signature: Signature, pernosco_user: PernoscoUser, pernosco_group: PernoscoGroup) -> str:
    """
    Return metadata required for uploading a package to Pernosco.

        Parameters:
            public_key (PublicKey): Public key for Pernosco user
            signature (Signature): Message digest for the package to be uploaded
            pernosco_user (PernoscoUser): Pernosco user
            pernosco_group (PernoscoGroup): Pernosco group

        Returns:
            metadata (str): A string of comma-separated metadata values
    """
    # Send the public key with the signature so the server can easily
    # determine which key was used and check that the key is authorized
    metadata = "publickey=%s,signature=%s,user=%s,group=%s"%(strip_wrapper(public_key), signature, pernosco_user, pernosco_group)
    if args.title != None:
        metadata += ",title=%s"%urllib.parse.quote(args.title)
    if args.url != None:
        metadata += ",url=%s"%urllib.parse.quote(args.url)

    if 'PERNOSCO_EXTRA_METADATA' in os.environ:
        metadata += ",%s"%os.environ['PERNOSCO_EXTRA_METADATA']
    return metadata

def append_crypto_data_to_package(package_file_name: str, crypto_data: CryptoData) -> None:
    """
    Append cryptographic data required to upload the package at a later time
    to the package.

        Parameters:
            package_file_name (str): Name of the package file to be uploaded later
            crypto_data (CryptoData): Cryptographic data required to upload the package
    """
    print("Appending cryptographic data required for upload to %s"%package_file_name)
    crypto_data_json = json.dumps(crypto_data)
    with open(package_file_name, "a") as package_file:
        print(crypto_data_json, file=package_file)
        print("%d"%len(crypto_data_json), end="", file=package_file)

def upload_file(nonce: Nonce, signature: Signature, aws_access_key_id: AwsAccessKeyId,
        aws_secret_access_key: AwsSecretAccessKey, public_key: PublicKey,
        pernosco_user: PernoscoUser, pernosco_group: PernoscoGroup, metadata: str, payload_file_name: str) -> None:
    """
    Upload the specified payload file to Pernosco.

        Parameters:
            nonce (Nonce): Nonce for uploaded file name
            signature (Signature): Message digest for the package to be uploaded
            aws_access_key_id (AwsAccessKeyId): AWS access key ID
            aws_secret_access_key (AwsSecretAccessKey): AWS secret access key
            public_key (PublicKey): Public key for Pernosco user
            pernosco_user (PernoscoUser): Pernosco user
            pernosco_group (PernoscoGroup): Pernosco group
            metadata (str): Metadata required for the uplaod
            payload_file_name (str): File to be uploaded
    """
    s3_url = "s3://pernosco-upload/%s.tar.zst"%nonce
    really = ''
    if args.subcommand == 'upload' and args.dry_run:
        really = " (not really)"
    print("Uploading %d bytes to %s...%s"%(os.path.getsize(payload_file_name), s3_url, really))

    aws_env = get_aws_environment(aws_access_key_id, aws_secret_access_key)

    checker_args = ["aws", "lambda", "invoke", "--function-name", "upload-credential-check", "--qualifier"]
    if 'PERNOSCO_CREDENTIAL_CHECKER' in os.environ:
        checker_args.extend([os.environ['PERNOSCO_CREDENTIAL_CHECKER']])
    else:
        checker_args.extend(["PROD"])
    checker_args.extend(["--payload", "\"publickey=%s,user=%s,group=%s\""%(strip_wrapper(public_key), pernosco_user, pernosco_group), "/dev/null"])

    aws_cmd = ["aws", "s3", "cp", "--metadata", metadata, "--endpoint-url", "https://s3-accelerate.amazonaws.com", payload_file_name, s3_url]

    if args.subcommand == 'upload' and args.dry_run:
        base.check_call(["cp", payload_file_name, args.dry_run])
        cmd_obj = dict(checker_cmd=checker_args, aws_cmd=aws_cmd, aws_env=aws_env)
        with open("%s.cmd"%args.dry_run, "w") as cmd:
            print(json.dumps(cmd_obj), file=cmd)

        crypto_data: CryptoData = {
            'public_key': public_key,
            'signature': signature,
            'nonce': nonce
        }
        append_crypto_data_to_package(args.dry_run, crypto_data)
    else:
        # Check our credentials before proceeding further.
        p3 = base.Popen(checker_args, env=aws_env, stdout=subprocess.PIPE)
        check_result = p3.communicate()[0].decode("utf-8")
        if check_result.find("Unhandled") != -1:
            raise base.CustomException("Your upload credentials are not valid. Check them and try again.")
        base.check_call(aws_cmd, env=aws_env)

def split_pernosco_user_secret_key(pernosco_user_secret_key: PernoscoUserSecretKey) -> Tuple[AwsAccessKeyId, AwsSecretAccessKey, PernoscoSecretKey]:
    parts = pernosco_user_secret_key.split(',')
    aws_access_key_id = AwsAccessKeyId(parts[0])
    aws_secret_access_key = AwsSecretAccessKey(parts[1])
    pernosco_secret_key = PernoscoSecretKey(parts[2])
    return (aws_access_key_id, aws_secret_access_key, pernosco_secret_key)

def upload(pernosco_user: PernoscoUser, pernosco_group: PernoscoGroup, pernosco_user_secret_key: PernoscoUserSecretKey) -> None:
    """
    Upload a trace to Pernosco.

        Parameters:
            pernosco_user (PernoscoUser): Pernosco user
            pernosco_group (PernoscoGroup): Pernosco group
            pernosco_user_secret_key (PernoscoUserSecretKey): Secret credentials required for Pernosco
    """
    with tempfile.NamedTemporaryFile(mode="w+b") as payload_file:
        print("Compressing to %s..."%payload_file.name)
        (aws_access_key_id, aws_secret_access_key, pernosco_secret_key) = split_pernosco_user_secret_key(pernosco_user_secret_key)
        (public_key, signature, nonce) = prepare_upload_data(payload_file, pernosco_secret_key)
        metadata = get_metadata_for_upload(public_key, signature, pernosco_user, pernosco_group)
        upload_file(nonce, signature, aws_access_key_id, aws_secret_access_key, public_key,
                    pernosco_user, pernosco_group, metadata, payload_file.name)

def extract_crypto_data_from_package(package_file_name: str) -> CryptoData:
    """
    Extract the persisted cryptographic data required to upload the specified package file
    from said package file.
    NOTE: This alters the package file by removing the extracted cryptographic data.

        Parameters:
            package_file_name (str): Name of the package file to be uploaded to Pernosco

        Returns:
            crypto_data (CryptoData): Cryptographic data required for uploading specified package
    """
    print("Extracting cryptographic data required for upload from %s"%package_file_name)

    # First, get the length of the cryptographic data JSON string from the end
    # of the file.
    crypto_file = open(package_file_name, "r+")
    crypto_file.seek(0, io.SEEK_END)

    is_reading_json_len = True
    offset = crypto_file.tell() - 1
    json_len_str = ""
    while is_reading_json_len:
        crypto_file.seek(offset, io.SEEK_SET)
        byte = crypto_file.read(1)
        if byte == "\n":
            is_reading_json_len = False
        else:
            json_len_str += byte
            offset -= 1

    # Reverse the length string since it was read backwards from the end of the fle.
    json_len_str= json_len_str[::-1]
    json_len = int(json_len_str)

    # `offset` is currently at the '\n' following the crytpographic data JSON string.
    # Update it so that it's at the beginning of the JSON string.
    offset -= json_len

    # Second, read the cryptographic data JSON string.
    crypto_file.seek(offset, io.SEEK_SET)
    crypto_data_str = crypto_file.readline()
    crypto_data = cast(CryptoData, json.loads(crypto_data_str))

    # Third, truncate the file to restore the original package file without any
    # cryptographic data appended to the end.

    # Since `offset` is the byte index of the cryptographic data's beginning,
    # it is also the size of the original package file without the
    # cryptographic data.
    original_package_len = offset
    crypto_file.truncate(original_package_len)
    crypto_file.close()

    return crypto_data

def upload_package(pernosco_user: PernoscoUser, pernosco_group: PernoscoGroup, pernosco_user_secret_key: PernoscoUserSecretKey, package_file_name: str) -> None:
    """
    Upload the specified package file to Pernosco.

        Parameters:
            pernosco_user (PernoscoUser): Pernosco user
            pernosco_group (PernoscoGroup): Pernosco group
            pernosco_user_secret_key (PernoscoUserSecretKey): Secret credentials required for Pernosco
            package_file_name (str): Name of the package file to be uploaded to Pernosco
    """
    # Extract cryptographic data required to upload the package from the
    # package file; remove said cryptographic data from the package in order to
    # make the package valid for an upload.
    crypto_data = extract_crypto_data_from_package(package_file_name)
    (public_key, signature, nonce) = crypto_data["public_key"], crypto_data["signature"], crypto_data["nonce"]

    metadata = get_metadata_for_upload(public_key, signature, pernosco_user, pernosco_group)
    (aws_access_key_id, aws_secret_access_key, pernosco_secret_key) = split_pernosco_user_secret_key(pernosco_user_secret_key)

    try:
        upload_file(nonce, signature, aws_access_key_id, aws_secret_access_key, public_key, pernosco_user,
            pernosco_group, metadata, package_file_name)
    finally:
        # Add the cryptographic data required to upload the package back into the
        # package file.
        append_crypto_data_to_package(package_file_name, crypto_data)

def keygen_cmd() -> None:
    check_executable('openssl', 'openssl')

    if len(args.provided_secret.split(',')) != 2:
        print("Invalid <provided-secret> argument", file=sys.stderr)
    full_key = base.check_output(['openssl', 'ecparam', '-genkey', '-name', 'prime256v1', '-noout'])
    base.maybe_echo(['openssl', 'ec', '-pubout'])
    public_key = subprocess.check_output(['openssl', 'ec', '-pubout'], input=full_key, stderr=subprocess.DEVNULL).decode('utf-8')
    print("Private key: PERNOSCO_USER_SECRET_KEY=%s,%s"%(args.provided_secret, strip_wrapper(full_key.decode('utf-8'))))
    print("Public key: %s"%strip_wrapper(public_key))

def check_upload_analyze_requirements() -> None:
    check_executable('openssl', 'openssl')
    check_executable('tar', 'tar')
    check_executable('zstdmt', 'zstd')
    if not shutil.which('rr'):
        print("Please install `rr` master and make sure it's on your $PATH.", file=sys.stderr)
        sys.exit(1)
    status = subprocess.run(['rr', 'traceinfo', '/dev/null'], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    if status.returncode != 65:
        print("rr is out of date. Please install `rr` master and make sure it's on your $PATH.", file=sys.stderr)
        sys.exit(1)

def collect_source_dirs() -> Tuple[List[str], Dict[str, str]]:
    source_dirs = []
    comp_dir_substitutions = {}
    for s in args.substitute:
        (library, path) = s.split('=', maxsplit=1)
        if not path:
            print("Missing path in %s"%s, file=sys.stderr)
            sys.exit(1)
        source_dirs.append(os.path.realpath(path))
        comp_dir_substitutions[library] = path
    for d in args.source_dirs:
        source_dirs.append(os.path.realpath(d))
    if not args.no_local_sources and len(source_dirs) == 0:
        print("No source directories were provided. Use --no-local-sources if this is intentional.", file=sys.stderr)
        sys.exit(1)
    if len(source_dirs) > 0 and args.no_local_sources:
        print("--no-local-sources was specified but source directories %s were provided"%source_dirs, file=sys.stderr)
        sys.exit(1)
    return (source_dirs, comp_dir_substitutions)

def get_config_var(name: str) -> str:
    env_var = "PERNOSCO_%s"%(name.upper())
    if env_var in os.environ:
        return os.environ[env_var]
    if 'HOME' in os.environ:
        path = "%s/.config/pernosco/%s"%(os.environ['HOME'], name)
        try:
            with open(path, "r") as file:
                return file.read().replace('\n', '')
        except:
            pass
    print("Can't find %s or ~/.config/pernosco/%s"%(env_var, name), file=sys.stderr)
    sys.exit(1)

def get_config() -> Tuple[PernoscoUser, PernoscoGroup, PernoscoUserSecretKey]:
    pernosco_user = PernoscoUser(get_config_var('user'))
    pernosco_group = PernoscoGroup(get_config_var('group'))
    pernosco_user_secret_key = PernoscoUserSecretKey(get_config_var('user_secret_key'))
    return (pernosco_user, pernosco_group, pernosco_user_secret_key)

def check_for_aws_command() -> None:
    """
    Check that the `aws' command-line tools are installed.
    """
    if not shutil.which('aws'):
        print("Please install the AWS command-line tools using", file=sys.stderr)
        print("  sudo pip3 install awscli --upgrade", file=sys.stderr)
        print("(Distribution packages may fail due to https://github.com/aws/aws-cli/issues/2403.)", file=sys.stderr)
        sys.exit(1)

def check_title_and_url_args() -> None:
    """
    Check that --title and --url command-line arguments are valid.
    """
    if args.title:
        if len(args.title.encode('utf-8')) > 100:
            print("Title must have max 100 UTF-8 bytes", file=sys.stderr)
            exit(1)
    if args.url:
        if len(args.url.encode('utf-8')) > 1000:
            print("Url must have max 1000 UTF-8 bytes", file=sys.stderr)
            exit(1)

def upload_cmd() -> None:
    base.trace_dir = args.trace_dir
    check_upload_analyze_requirements()
    check_for_aws_command()

    if args.ignore_warnings > 0:
        print("Ignoring the automated trace check (not recommended!)", file=sys.stderr)

    check_title_and_url_args()

    if not os.path.isfile("%s/version"%args.trace_dir):
        print("Can't find rr trace in %s"%args.trace_dir, file=sys.stderr)
        sys.exit(1)


    (source_dirs, comp_dir_substitutions) = collect_source_dirs()
    check_privacy_policy_consent()
    check_trace()
    (pernosco_user, pernosco_group, pernosco_user_secret_key) = get_config()
    write_metadata(pernosco_user, pernosco_group)
    packaging.rr_pack()
    packaging.package_libthread_db()
    packaging.package_extra_rr_trace_files()
    repo_paths = sources.package_source_files(source_dirs, [], comp_dir_substitutions)
    sources.package_gdbinit(repo_paths, "%s/gdbinit"%args.trace_dir)
    upload(pernosco_user, pernosco_group, pernosco_user_secret_key)

def upload_package_cmd() -> None:
    """
    Upload a package created using `pernosco-submit upload --dry-run` to Pernosco.
    """
    check_for_aws_command()
    check_title_and_url_args()
    check_privacy_policy_consent()

    package_file_name = args.package

    (pernosco_user, pernosco_group, pernosco_user_secret_key) = get_config()
    upload_package(pernosco_user, pernosco_group, pernosco_user_secret_key, package_file_name)

def package_source_files_extra(source_dirs: List[str], comp_dir_substitutions: Dict[str, str]) -> List[str]:
    rr_output = sources.run_rr_sources(comp_dir_substitutions, 'explicit-sources', args.binaries)
    tag = "extra.%s"%(hex(random.randrange(pow(2,64)))[2:])
    output_dir = "%s/extra_rr_trace_files"%args.output_dir
    os.makedirs("%s/files.%s"%(output_dir, tag), exist_ok=True)
    return sources.package_source_files_from_rr_output(source_dirs, [], rr_output, comp_dir_substitutions, output_dir, tag, "buildid", build_dir=args.build_dir)

def analyze_build_cmd() -> None:
    check_upload_analyze_requirements()

    (source_dirs, comp_dir_substitutions) = collect_source_dirs()

    repo_paths = package_source_files_extra(source_dirs, comp_dir_substitutions)
    sources.package_gdbinit(repo_paths, "%s/extra_rr_trace_files/gdbinit"%args.output_dir)

if args.subcommand == 'upload':
    upload_cmd()
elif args.subcommand == 'upload-package':
    upload_package_cmd()
elif args.subcommand == 'keygen':
    keygen_cmd()
elif args.subcommand == 'analyze-build':
    analyze_build_cmd()
else:
    arg_parser.print_help(sys.stderr)
    sys.exit(1)
